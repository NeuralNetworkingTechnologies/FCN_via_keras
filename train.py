import fcn_keras as fk
from data import data

from keras.models import model_from_json
from keras.preprocessing.image import ImageDataGenerator

import cv2
import numpy as np
import matplotlib.pyplot as plt
import os

def train(test=False):
    data_augmentation = True
    X_train, Y_train, X_test, Y_test = data(test=test)
    model = fk.create_model()
    model.compile(loss="categorical_crossentropy",
                  optimizer='adadelta',
                  metrics=["accuracy"])
    if not data_augmentation:
        print('Not using data augmentation.')
        history =  model.fit(X_train, Y_train,
                       batch_size=1,
                       nb_epoch=1,
                       verbose=1,
                       validation_data=(X_test,Y_test))
    else:
        print('Using real-time data augmentation.')
        datagen = ImageDataGenerator(
            featurewise_center=False,  # set input mean to 0 over the dataset
            samplewise_center=False,  # set each sample mean to 0
            featurewise_std_normalization=False,  # divide inputs by std of the dataset
            samplewise_std_normalization=False,  # divide each input by its std
            zca_whitening=False,  # apply ZCA whitening
            rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
            width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
            height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
            horizontal_flip=True,  # randomly flip images
            vertical_flip=False)  # randomly flip images

        # fit the model on the batches generated by datagen.flow()
        model.fit_generator(datagen.flow(X_train, Y_train,
                            batch_size=2),
                            samples_per_epoch=X_train.shape[0],
                            nb_epoch=1,
                            validation_data=(X_test, Y_test))
    model.save_weights('weights.hdf5')
    return history

def make_graph(history):
    pass

if __name__ == "__main__":
    #train(test=True)
    train()
